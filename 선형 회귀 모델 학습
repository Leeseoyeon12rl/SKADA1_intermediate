from sklearn.linear_model import LinearRegression
import numpy as np
from matplotlib import pyplot as plt
%matplotlib inline

model = LinearRegression()
model.fit(X_train, y_train)
pred = model.predict(X_test)

def mse(gt, pred):
    data_len = len(gt)
    return ( (gt - pred) ** 2 ).sum() / data_len

error = mse(y_test, pred)
print('최소 제곱 선형 회귀 모델의 오차: {}'.format(error))
최소 제곱 선형 회귀 모델의 오차: 0.45179110456395677

start_i, end_i = 10000, 20000
fig = plt.figure(figsize = (10,5))
plt.title('Ground truth')
plt.xlabel('Time (picoseconds)')
plt.ylabel('Values')
for i, data in enumerate(np.concatenate([X_test, y_test], axis=1).transpose()):
    plt.plot(df_train.iloc[start_i:end_i, 0] * 1e+12, data[start_i:end_i], label = df_train.columns[i+1])
plt.legend(loc = 'upper right')
plt.show()

fig = plt.figure(figsize = (10,5))
plt.title('Model prediction')
plt.xlabel('Time (picoseconds)')
plt.ylabel('Values')
for i, data in enumerate(np.concatenate([X_test, pred], axis=1).transpose()):
    plt.plot(df_train.iloc[start_i:end_i, 0] * 1e+12, data[start_i:end_i], label = df_train.columns[i+1])
plt.legend(loc = 'upper right')
plt.show()

########################################################

from sklearn.linear_model import Ridge

model = Ridge()
model.fit(X_train, y_train)
pred = model.predict(X_test)

error = mse(y_test, pred)
print('Ridge 선형 회귀 모델의 오차: {}'.format(error))
Ridge 선형 회귀 모델의 오차: 0.45179121829710334

# 정답 그래프 그리기
fig = plt.figure(figsize = (10,5))
plt.title('Ground truth')
plt.xlabel('Time (picoseconds)')
plt.ylabel('Values')
for i, data in enumerate(np.concatenate([X_test, y_test], axis=1).transpose()):
    plt.plot(df_train.iloc[start_i:end_i, 0] * 1e+12, data[start_i:end_i], label = df_train.columns[i+1])
plt.legend(loc = 'upper right')
plt.show()
# 예측 그래프 그리기
fig = plt.figure(figsize = (10,5))
plt.title('Model prediction')
plt.xlabel('Time (picoseconds)')
plt.ylabel('Values')
for i, data in enumerate(np.concatenate([X_test, pred], axis=1).transpose()):
    plt.plot(df_train.iloc[start_i:end_i, 0] * 1e+12, data[start_i:end_i], label = df_train.columns[i+1])
plt.legend(loc = 'upper right')
plt.show()
